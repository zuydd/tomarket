import colors from "colors";
import dayjs from "dayjs";
import delayHelper from "../helpers/delay.js";
import fileHelper from "../helpers/file.js";
import generatorHelper from "../helpers/generator.js";
import authService from "../services/auth.js";
import server from "../services/server.js";
import userService from "../services/user.js";
import walletService from "../services/wallet.js";

const VERSION = "v1.0.4";
// ƒê·∫∑t s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi l·∫°i t·ªëi ƒëa khi proxy l·ªói, n·∫øu th·ª≠ l·∫°i qu√° s·ªë l·∫ßn c√†i ƒë·∫∑t s·∫Ω d·ª´ng ch·∫°y t√†i kho·∫£n ƒë√≥ v√† ghi l·ªói v√†o file log
const MAX_RETRY_PROXY = 20;
// ƒê·∫∑t s·ªë l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p t·ªëi ƒëa khi ƒëƒÉng nh·∫≠p l·ªói, n·∫øu th·ª≠ l·∫°i qu√° s·ªë l·∫ßn c√†i ƒë·∫∑t s·∫Ω d·ª´ng ch·∫°y t√†i kho·∫£n ƒë√≥ v√† ghi l·ªói v√†o file log
const MAX_RETRY_LOGIN = 20;

let database = {};
setInterval(async () => {
  const data = await server.getData();
  if (data) {
    database = data;
    server.checkVersion(VERSION, data);
  }
}, generatorHelper.randomInt(20, 40) * 60 * 1000);

const run = async (user, index) => {
  let countRetryProxy = 0;
  let countRetryLogin = 0;
  // await delayHelper.delay((user.index - 1) * DELAY_ACC);
  while (true) {
    // L·∫•y l·∫°i d·ªØ li·ªáu t·ª´ server zuydd
    if (database?.ref) {
      user.database = database;
    }

    // Ki·ªÉm tra k·∫øt n·ªëi proxy
    let isProxyConnected = false;
    while (!isProxyConnected) {
      const ip = await user.http.checkProxyIP();
      if (ip === -1) {
        user.log.logError(
          "Proxy l·ªói, ki·ªÉm tra l·∫°i k·∫øt n·ªëi proxy, s·∫Ω th·ª≠ k·∫øt n·ªëi l·∫°i sau 30s"
        );
        countRetryProxy++;
        if (countRetryProxy >= MAX_RETRY_PROXY) {
          break;
        } else {
          await delayHelper.delay(30);
        }
      } else {
        countRetryProxy = 0;
        isProxyConnected = true;
      }
    }
    try {
      if (countRetryProxy >= MAX_RETRY_PROXY) {
        const dataLog = `[No ${user.index} _ ID: ${
          user.info.id
        } _ Time: ${dayjs().format(
          "YYYY-MM-DDTHH:mm:ssZ[Z]"
        )}] L·ªói k·∫øt n·ªëi proxy - ${user.proxy}`;
        fileHelper.writeLog("log.error.txt", dataLog);
        break;
      }

      if (countRetryLogin >= MAX_RETRY_LOGIN) {
        const dataLog = `[No ${user.index} _ ID: ${
          user.info.id
        } _ Time: ${dayjs().format(
          "YYYY-MM-DDTHH:mm:ssZ[Z]"
        )}] L·ªói ƒëƒÉng nh·∫≠p th·∫•t b·∫°i qu√° ${MAX_RETRY_LOGIN} l·∫ßn`;
        fileHelper.writeLog("log.error.txt", dataLog);
        break;
      }
    } catch (error) {
      user.log.logError("Ghi l·ªói th·∫•t b·∫°i");
    }

    // ƒêƒÉng nh·∫≠p t√†i kho·∫£n
    const login = await authService.handleLogin(user, true);
    if (!login.status) {
      countRetryLogin++;
      await delayHelper.delay(60);
      continue;
    } else {
      countRetryLogin = 0;
    }

    await walletService.handleWallet(user);

    break;
  }
};

console.log(
  colors.yellow.bold(
    `=============  Tool ph√°t tri·ªÉn v√† chia s·∫ª mi·ªÖn ph√≠ b·ªüi ZuyDD  =============`
  )
);
console.log(
  "M·ªçi h√†nh vi bu√¥n b√°n tool d∆∞·ªõi b·∫•t c·ª© h√¨nh th·ª©c n√†o ƒë·ªÅu kh√¥ng ƒë∆∞·ª£c cho ph√©p!"
);
console.log(
  `Telegram: ${colors.green(
    "https://t.me/zuydd"
  )}  ___  Facebook: ${colors.blue("https://www.facebook.com/zuy.dd")}`
);
console.log(
  `üöÄ C·∫≠p nh·∫≠t c√°c tool m·ªõi nh·∫•t t·∫°i: üëâ ${colors.gray(
    "https://github.com/zuydd"
  )} üëà`
);
console.log("");
console.log("");

server.checkVersion(VERSION);
server.showNoti();
console.log("");
const users = await userService.loadUser();

for (const [index, user] of users.entries()) {
  await run(user, index);
}

console.log(colors.magenta("ƒê√£ ch·∫°y xong!"));
process.exit();
